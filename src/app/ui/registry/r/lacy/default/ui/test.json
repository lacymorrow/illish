{
  "name": "test",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "devDependencies": [],
  "registryDependencies": [
    "button",
    "input",
    "theme"
  ],
  "files": [
    {
      "path": "ui/test.tsx",
      "content": "/*\n * This file was generated by ShipKit.\n * Learn more at https://shipkit.io\n */\n\n\"use client\";\n\n/**\n * A comprehensive test component that showcases all features detectable by the registry generator.\n * @author Test Team\n * @version 1.0.0\n * @since 0.1.0\n * @see https://example.com/docs\n * @example\n * ```tsx\n * <TestComponent\n *   label=\"Test\"\n *   onAction={() => console.log('clicked')}\n *   theme=\"dark\"\n * />\n * ```\n */\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ThemeProvider } from \"@/components/ui/theme\";\nimport { cn } from \"@/lib/utils\";\nimport { motion } from \"framer-motion\";\nimport { useCallback, useEffect, useState } from \"react\";\n\n// Test CSS variables detection\nconst styles = {\n\tcontainer: {\n\t\t\"--test-color\": \"blue\",\n\t\t\"--test-size\": \"1rem\",\n\t} as Record<string, string>,\n};\n\n// Test complex type detection\ntype Theme = \"light\" | \"dark\" | \"system\";\ntype Size = \"sm\" | \"lg\" | \"default\" | \"icon\";\n\ninterface TestComponentProps {\n\t/** The main label text */\n\tlabel: string;\n\t/** Optional secondary description */\n\tdescription?: string;\n\t/** The visual theme to use */\n\ttheme?: Theme;\n\t/** The size variant */\n\tsize?: Size;\n\t/** Whether the component is disabled */\n\tdisabled?: boolean;\n\t/** Array of items to display */\n\titems?: Array<{\n\t\tid: string;\n\t\ttitle: string;\n\t}>;\n\t/** Record of key-value pairs */\n\tmetadata?: Record<string, string>;\n\t/** Callback when action is triggered */\n\tonAction?: () => void;\n\t/** Callback when value changes */\n\tonChange?: (value: string) => void;\n\t/** Callback when component mounts */\n\tonMount?: () => void;\n\t/** Custom CSS classes */\n\tclassName?: string;\n}\n\nexport const TestComponent = ({\n\tlabel,\n\tdescription,\n\ttheme = \"light\",\n\tsize = \"default\",\n\tdisabled = false,\n\titems = [],\n\tmetadata = {},\n\tonAction,\n\tonChange,\n\tonMount,\n\tclassName,\n}: TestComponentProps) => {\n\t// Test hooks detection\n\tconst [value, setValue] = useState(\"\");\n\tconst [isOpen, setIsOpen] = useState(false);\n\n\tconst handleAction = useCallback(() => {\n\t\tonAction?.();\n\t}, [onAction]);\n\n\tuseEffect(() => {\n\t\tonMount?.();\n\t}, [onMount]);\n\n\t// Test Tailwind classes and variants\n\treturn (\n\t\t<ThemeProvider>\n\t\t\t<motion.div\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"bg-[--test-color]\",\n\t\t\t\t\t\"flex flex-col gap-4 p-4 rounded-lg\",\n\t\t\t\t\t\"bg-background text-foreground\",\n\t\t\t\t\t\"hover:bg-muted\",\n\t\t\t\t\t\"md:flex-row\",\n\t\t\t\t\tdisabled && \"opacity-50 cursor-not-allowed\",\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t\tstyle={styles.container}\n\t\t\t\tinitial={{ opacity: 0 }}\n\t\t\t\tanimate={{ opacity: 1 }}\n\t\t\t>\n\t\t\t\t<div className=\"space-y-2\">\n\t\t\t\t\t<h3 className=\"text-lg font-semibold tracking-tight\">{label}</h3>\n\t\t\t\t\t{description && (\n\t\t\t\t\t\t<p className=\"text-sm text-muted-foreground\">{description}</p>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t<Input\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\tsetValue(e.target.value);\n\t\t\t\t\t\t\tonChange?.(e.target.value);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tplaceholder=\"Type something...\"\n\t\t\t\t\t\tclassName=\"w-[200px]\"\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={handleAction}\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\tvariant=\"default\"\n\t\t\t\t\t\tsize={size}\n\t\t\t\t\t>\n\t\t\t\t\t\tAction\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\n\t\t\t\t{items.length > 0 && (\n\t\t\t\t\t<ul className=\"list-disc list-inside\">\n\t\t\t\t\t\t{items.map((item) => (\n\t\t\t\t\t\t\t<li key={item.id} className=\"text-sm\">\n\t\t\t\t\t\t\t\t{item.title}\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\n\t\t\t\t{Object.entries(metadata).map(([key, value]) => (\n\t\t\t\t\t<div key={key} className=\"text-xs text-muted-foreground\">\n\t\t\t\t\t\t{key}: {value}\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</motion.div>\n\t\t</ThemeProvider>\n\t);\n};\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "library": "lacy",
    "theme": "default"
  }
}