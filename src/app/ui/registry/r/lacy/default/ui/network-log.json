{
  "name": "network-log",
  "type": "registry:ui",
  "dependencies": [
    "class-variance-authority",
    "framer-motion",
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "ui/network-log.tsx",
      "content": "/*\n * This file was generated by ShipKit.\n * Learn more at https://shipkit.io\n */\n\n\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { RefreshCw, SearchIcon, Wifi, WifiOff } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\n\ntype LogLevel = \"info\" | \"warning\" | \"error\" | \"success\";\ntype RequestType = \"fetch\" | \"xmlhttprequest\" | \"other\";\ntype RequestStatus = \"pending\" | \"success\" | \"error\";\n\ninterface NetworkRequest {\n\tid: string;\n\tname: string;\n\tstatus: RequestStatus;\n\ttype: RequestType | string;\n\tsize: string;\n\ttime: number;\n\tlevel?: LogLevel;\n}\n\nconst networkLogVariants = cva(\n\t// Base styles\n\t\"overflow-hidden rounded-lg shadow-2xl\",\n\t{\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tdefault: \"bg-[#1a0f2e]\",\n\t\t\t\tmodern: \"bg-gray-900 bg-opacity-40 backdrop-blur-xl border border-gray-700 rounded-3xl\",\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tdefault: \"w-full max-w-4xl\",\n\t\t\t\tcompact: \"w-full max-w-md\",\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tvariant: \"default\",\n\t\t\tsize: \"default\",\n\t\t},\n\t}\n);\n\nconst formatBytes = (bytes: number): string => {\n\tif (bytes === 0) return \"0 Bytes\";\n\tconst k = 1024;\n\tconst sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\n\treturn `${Number.parseFloat((bytes / (k ** i)).toFixed(2))} ${sizes[i]}`;\n};\n\nconst StatusIndicator = ({\n\tstatus,\n}: {\n\tstatus: RequestStatus;\n}) => {\n\tconst baseClasses = \"h-2 w-2 rounded-full\";\n\tconst statusClasses = {\n\t\tpending: \"bg-blue-400\",\n\t\tsuccess: \"bg-green-400\",\n\t\terror: \"bg-red-400\",\n\t};\n\n\treturn (\n\t\t<motion.div\n\t\t\tclassName={cn(baseClasses, statusClasses[status])}\n\t\t\tanimate={status === \"pending\" ? { scale: [1, 1.2, 1] } : {}}\n\t\t\ttransition={{ duration: 1, repeat: Number.POSITIVE_INFINITY }}\n\t\t/>\n\t);\n};\n\ninterface NetworkLogProps extends VariantProps<typeof networkLogVariants> {\n\tclassName?: string;\n\tshowSearch?: boolean;\n\tshowRefresh?: boolean;\n\tsimulateRequests?: boolean;\n}\n\nexport const NetworkLog = ({\n\tvariant,\n\tsize,\n\tclassName,\n\tshowSearch = false,\n\tshowRefresh = true,\n\tsimulateRequests = false,\n}: NetworkLogProps) => {\n\tconst [requests, setRequests] = useState<NetworkRequest[]>([]);\n\tconst [isOnline, setIsOnline] = useState(true);\n\tconst [isSearchOpen, setIsSearchOpen] = useState(showSearch);\n\tconst [searchQuery, setSearchQuery] = useState(\"\");\n\n\tuseEffect(() => {\n\t\tconst updateOnlineStatus = () => setIsOnline(navigator?.onLine ?? true);\n\t\twindow.addEventListener(\"online\", updateOnlineStatus);\n\t\twindow.addEventListener(\"offline\", updateOnlineStatus);\n\n\t\tif (\"PerformanceObserver\" in window) {\n\t\t\tconst observer = new PerformanceObserver((list) => {\n\t\t\t\tfor (const entry of list.getEntries()) {\n\t\t\t\t\tif (entry.entryType === \"resource\") {\n\t\t\t\t\t\tconst request: NetworkRequest = {\n\t\t\t\t\t\t\tid: Math.random().toString(36).slice(2, 9),\n\t\t\t\t\t\t\tname: entry.name,\n\t\t\t\t\t\t\tstatus: entry.duration > 0 ? \"success\" : \"error\",\n\t\t\t\t\t\t\ttype: (entry as PerformanceResourceTiming).initiatorType,\n\t\t\t\t\t\t\tsize: formatBytes(\n\t\t\t\t\t\t\t\t(entry as PerformanceResourceTiming).transferSize,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\ttime: Math.round(entry.duration),\n\t\t\t\t\t\t\tlevel: entry.duration > 1000 ? \"warning\" : \"info\",\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsetRequests((prev) => [request, ...prev.slice(0, 9)]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tobserver.observe({ entryTypes: [\"resource\"] });\n\n\t\t\treturn () => {\n\t\t\t\tobserver.disconnect();\n\t\t\t\twindow.removeEventListener(\"online\", updateOnlineStatus);\n\t\t\t\twindow.removeEventListener(\"offline\", updateOnlineStatus);\n\t\t\t};\n\t\t}\n\n\t\tif (simulateRequests) {\n\t\t\tconst interval = setInterval(() => {\n\t\t\t\tconst simulatedRequest: NetworkRequest = {\n\t\t\t\t\tid: Math.random().toString(36).slice(2, 9),\n\t\t\t\t\tname: `/api/endpoint${Math.floor(Math.random() * 100)}`,\n\t\t\t\t\tstatus: Math.random() > 0.8 ? \"error\" : \"success\",\n\t\t\t\t\ttype: Math.random() > 0.5 ? \"fetch\" : \"xmlhttprequest\",\n\t\t\t\t\tsize: formatBytes(Math.floor(Math.random() * 1000000)),\n\t\t\t\t\ttime: Math.floor(Math.random() * 1000),\n\t\t\t\t};\n\t\t\t\tsetRequests((prev) => [simulatedRequest, ...prev.slice(0, 9)]);\n\t\t\t}, 2000);\n\n\t\t\treturn () => {\n\t\t\t\tclearInterval(interval);\n\t\t\t\twindow.removeEventListener(\"online\", updateOnlineStatus);\n\t\t\t\twindow.removeEventListener(\"offline\", updateOnlineStatus);\n\t\t\t};\n\t\t}\n\t}, [simulateRequests]);\n\n\tuseEffect(() => {\n\t\tsetIsSearchOpen(showSearch);\n\t}, [showSearch]);\n\n\tconst handleSearchToggle = () => {\n\t\tsetIsSearchOpen(!isSearchOpen);\n\t};\n\n\tconst filteredRequests = searchQuery\n\t\t? requests.filter((request) =>\n\t\t\trequest.name.toLowerCase().includes(searchQuery.toLowerCase())\n\t\t)\n\t\t: requests;\n\n\treturn (\n\t\t<div className={cn(networkLogVariants({ variant, size }), className)}>\n\t\t\t<div className=\"flex items-center justify-between border-b border-gray-700 p-4\">\n\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t<h2 className={cn(\n\t\t\t\t\t\t\"font-semibold\",\n\t\t\t\t\t\tvariant === \"modern\" ? \"text-xl text-white\" : \"text-gray-400\"\n\t\t\t\t\t)}>\n\t\t\t\t\t\tNetwork Activity\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex items-center space-x-4\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"hover:bg-black/20\",\n\t\t\t\t\t\t\tisSearchOpen && \"bg-black/20\"\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={handleSearchToggle}\n\t\t\t\t\t>\n\t\t\t\t\t\t<SearchIcon className=\"h-5 w-5 text-gray-400\" />\n\t\t\t\t\t</Button>\n\t\t\t\t\t{isOnline ? (\n\t\t\t\t\t\t<Wifi className=\"h-5 w-5 text-green-400\" />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<WifiOff className=\"h-5 w-5 text-red-400\" />\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"p-4\">\n\t\t\t\t<AnimatePresence>\n\t\t\t\t\t{isSearchOpen && (\n\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\tinitial={{ opacity: 0, height: 0 }}\n\t\t\t\t\t\t\tanimate={{ opacity: 1, height: \"auto\" }}\n\t\t\t\t\t\t\texit={{ opacity: 0, height: 0 }}\n\t\t\t\t\t\t\ttransition={{ duration: 0.2 }}\n\t\t\t\t\t\t\tclassName=\"relative mb-4 overflow-hidden\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<SearchIcon className=\"absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 transform text-gray-400\" />\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tvalue={searchQuery}\n\t\t\t\t\t\t\t\tonChange={(e) => setSearchQuery(e.target.value)}\n\t\t\t\t\t\t\t\tplaceholder=\"Search requests...\"\n\t\t\t\t\t\t\t\tclassName=\"w-full rounded-lg bg-gray-800 bg-opacity-50 py-2 pl-10 pr-4 text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</motion.div>\n\t\t\t\t\t)}\n\t\t\t\t</AnimatePresence>\n\n\t\t\t\t<div className=\"space-y-2\">\n\t\t\t\t\t<AnimatePresence initial={false}>\n\t\t\t\t\t\t{filteredRequests.length > 0 ? (\n\t\t\t\t\t\t\tfilteredRequests.map((request) => (\n\t\t\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\t\t\tkey={request.id}\n\t\t\t\t\t\t\t\t\tinitial={{ opacity: 0, y: 20 }}\n\t\t\t\t\t\t\t\t\tanimate={{ opacity: 1, y: 0 }}\n\t\t\t\t\t\t\t\t\texit={{ opacity: 0, height: 0 }}\n\t\t\t\t\t\t\t\t\ttransition={{ duration: 0.3 }}\n\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\"flex items-center justify-between rounded-lg p-3 text-sm\",\n\t\t\t\t\t\t\t\t\t\tvariant === \"modern\"\n\t\t\t\t\t\t\t\t\t\t\t? \"bg-gray-800 bg-opacity-50 text-gray-300\"\n\t\t\t\t\t\t\t\t\t\t\t: \"bg-gray-800/50 text-gray-300\"\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center space-x-3\">\n\t\t\t\t\t\t\t\t\t\t<StatusIndicator status={request.status} />\n\t\t\t\t\t\t\t\t\t\t<span className=\"max-w-[150px] truncate font-medium\">\n\t\t\t\t\t\t\t\t\t\t\t{request.name}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"flex space-x-4 text-xs text-gray-400\">\n\t\t\t\t\t\t\t\t\t\t<span>{request.type}</span>\n\t\t\t\t\t\t\t\t\t\t<span>{request.size}</span>\n\t\t\t\t\t\t\t\t\t\t<span>{request.time}ms</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</motion.div>\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"text-center animate-pulse\">\n\t\t\t\t\t\t\t\t<p className=\"text-muted-foreground/60\">Waiting for requests...</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</AnimatePresence>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{showRefresh && (\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclassName=\"w-full text-blue-400 hover:text-blue-300 flex items-center justify-center bg-gray-800 bg-opacity-30 py-4\"\n\t\t\t\t\tonClick={() => setRequests([])}\n\t\t\t\t>\n\t\t\t\t\t<RefreshCw className=\"mr-2 h-5 w-5\" />\n\t\t\t\t\tRefresh\n\t\t\t\t</button>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nNetworkLog.displayName = \"Network Log\"\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "library": "lacy",
    "theme": "default"
  }
}