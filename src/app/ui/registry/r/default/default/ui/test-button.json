{
  "name": "test-button",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "ui/test-button.tsx",
      "content": "/*\n * This file was generated by ShipKit.\n * Learn more at https://shipkit.io\n */\n\n/**\n * @component TestButton\n * @description A test button component to verify the documentation generation system\n * @status beta\n * @version 0.1.0\n * @author ShipKit Team\n * @repository https://github.com/shipkit/shipkit\n * @bugs https://github.com/shipkit/shipkit/issues\n *\n * @preview\n * ```tsx\n * <TestButton variant=\"primary\" size=\"md\">\n *   Click me\n * </TestButton>\n * ```\n * @previewHeight 100px\n * @previewBackground #ffffff\n * @previewVariant dark - #1a1a1a - dark\n * @previewVariant light - #ffffff\n * @previewVariant accent - #f0f0f0\n *\n * @example Basic Usage\n * A simple primary button with default settings\n * ```tsx\n * <TestButton variant=\"primary\">Default Button</TestButton>\n * ```\n * @test Click handler - Should call onClick when clicked\n * @test Disabled state - Should not call onClick when disabled\n *\n * @example With Icon\n * Using the button with an icon for enhanced visual feedback\n * ```tsx\n * <TestButton variant=\"secondary\" icon={<IconPlus />}>\n *   Add Item\n * </TestButton>\n * ```\n * @test Icon rendering - Should render icon when provided\n *\n * @example Loading State\n * Button shows a loading spinner and disables interaction\n * ```tsx\n * <TestButton loading>Processing...</TestButton>\n * ```\n * @test Loading state - Should show spinner and disable button\n *\n * @prop variant - The visual style of the button - primary | secondary | ghost | destructive - default: primary\n * @prop size - The size of the button - sm | md | lg | xl - default: md\n * @prop icon - Optional icon component to display - ReactNode\n * @prop fullWidth - Whether the button should take full width - boolean - default: false\n * @prop loading - Shows a loading spinner and disables the button - boolean - default: false - required\n *\n * @state isPressed - Tracks the pressed state of the button - boolean - default: false\n * @state isFocused - Tracks the focus state for keyboard navigation - boolean - default: false\n * @state isHovered - Tracks hover state for animations - boolean - default: false\n *\n * @dependency react - ^18.0.0 - npm\n * @dependency lucide-react - ^0.292.0 - npm\n * @dependency @/lib/utils - workspace:* - internal\n * @dependency tailwind-variants - ^0.1.0 - style\n *\n * @do Use clear, action-oriented button text\n * @do Include an icon when it helps clarify the action\n * @do Use destructive variant for dangerous actions\n * @dont Don't use long text in buttons\n * @dont Don't use multiple primary buttons in close proximity\n *\n * @note Buttons automatically manage focus states\n * @note Loading state prevents multiple clicks\n * @note Use aria-label for icon-only buttons\n *\n * @accessibility\n * Follows ARIA button pattern with proper roles and states.\n * Supports keyboard navigation and screen readers.\n * Implements WCAG 2.1 success criteria:\n * - 2.1.1 Keyboard (Level A)\n * - 2.1.2 No Keyboard Trap (Level A)\n * - 2.4.7 Focus Visible (Level AA)\n *\n * @customization\n * Customizable via CSS variables:\n * --test-button-primary-bg: Background color for primary variant\n * --test-button-primary-text: Text color for primary variant\n * --test-button-border-radius: Border radius for all variants\n * --test-button-focus-ring: Focus ring color and style\n */\n\nimport { cn } from \"@/lib/utils\";\nimport { Loader2 } from \"lucide-react\";\nimport * as React from \"react\";\n\nexport interface TestButtonProps\n\textends React.ButtonHTMLAttributes<HTMLButtonElement> {\n\tvariant?: \"primary\" | \"secondary\" | \"ghost\" | \"destructive\";\n\tsize?: \"sm\" | \"md\" | \"lg\" | \"xl\";\n\ticon?: React.ReactNode;\n\tfullWidth?: boolean;\n\tloading?: boolean;\n}\n\nexport const TestButton = React.forwardRef<HTMLButtonElement, TestButtonProps>(\n\t(\n\t\t{\n\t\t\tclassName,\n\t\t\tvariant = \"primary\",\n\t\t\tsize = \"md\",\n\t\t\ticon,\n\t\t\tfullWidth = false,\n\t\t\tloading = false,\n\t\t\tdisabled,\n\t\t\tchildren,\n\t\t\t...props\n\t\t},\n\t\tref\n\t) => {\n\t\tconst [isPressed, setIsPressed] = React.useState(false);\n\t\tconst [isFocused, setIsFocused] = React.useState(false);\n\t\tconst [isHovered, setIsHovered] = React.useState(false);\n\n\t\tconst styles = {\n\t\t\tbase: \"inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n\t\t\tvariant: {\n\t\t\t\tprimary: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n\t\t\t\tsecondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n\t\t\t\tghost: \"hover:bg-accent hover:text-accent-foreground\",\n\t\t\t\tdestructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tsm: \"h-8 px-3 text-xs\",\n\t\t\t\tmd: \"h-10 px-4 py-2\",\n\t\t\t\tlg: \"h-11 px-8\",\n\t\t\t\txl: \"h-12 px-10 text-lg\",\n\t\t\t},\n\t\t\tfullWidth: \"w-full\",\n\t\t\tpressed: isPressed ? \"scale-95\" : \"\",\n\t\t\tfocused: isFocused ? \"ring-2\" : \"\",\n\t\t\thovered: isHovered ? \"brightness-105\" : \"\",\n\t\t};\n\n\t\treturn (\n\t\t\t<button\n\t\t\t\tref={ref}\n\t\t\t\tdisabled={disabled || loading}\n\t\t\t\tclassName={cn(\n\t\t\t\t\tstyles.base,\n\t\t\t\t\tstyles.variant[variant],\n\t\t\t\t\tstyles.size[size],\n\t\t\t\t\tfullWidth && styles.fullWidth,\n\t\t\t\t\tstyles.pressed,\n\t\t\t\t\tstyles.focused,\n\t\t\t\t\tstyles.hovered,\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t\tonMouseDown={() => setIsPressed(true)}\n\t\t\t\tonMouseUp={() => setIsPressed(false)}\n\t\t\t\tonMouseLeave={() => {\n\t\t\t\t\tsetIsPressed(false);\n\t\t\t\t\tsetIsHovered(false);\n\t\t\t\t}}\n\t\t\t\tonMouseEnter={() => setIsHovered(true)}\n\t\t\t\tonFocus={() => setIsFocused(true)}\n\t\t\t\tonBlur={() => setIsFocused(false)}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t{loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n\t\t\t\t{!loading && icon && <span className=\"mr-2\">{icon}</span>}\n\t\t\t\t{children}\n\t\t\t</button>\n\t\t);\n\t}\n);\n\nTestButton.displayName = \"TestButton\";\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "author": "ShipKit",
    "license": "MIT",
    "library": "default",
    "theme": "default"
  }
}