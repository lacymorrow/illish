{"version":3,"file":"logger-worker.js","sourceRoot":"","sources":["../../src/workers/logger-worker.ts"],"names":[],"mappings":"AAAA,iCAAiC;;;;;;;;;;AAEjC,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAsB,IAAI,yBAAyB,CAAC;AAEhF;;;GAGG;AAEH,MAAM,QAAQ,GAAU,EAAE,CAAC;AAC3B,MAAM,cAAc,GAAG,EAAE,CAAC;AAC1B,MAAM,cAAc,GAAG,IAAI,CAAC,CAAC,YAAY;AAEzC,MAAM,SAAS,GAAG,GAAS,EAAE;IAC5B,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC3B,OAAO;IACR,CAAC;IAED,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;IACtD,KAAK,CAAC,OAAO,EAAE;QACd,MAAM,EAAE,MAAM;QACd,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;QAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;KAChC,CAAC;SACA,IAAI,CAAC,CAAO,QAAQ,EAAE,EAAE;QACxB,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC1D,CAAC,CAAA,CAAC;SACD,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC,CAAC;IACvE,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;AAC1C,CAAC,CAAC;AAEF,WAAW,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;AAEvC,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,KAAmB,EAAE,EAAE;IACxD,MAAM,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC;IAC/B,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACvB,SAAS,EAAE,CAAC;IAEZ,IAAI,QAAQ,CAAC,MAAM,IAAI,cAAc,EAAE,CAAC;QACvC,SAAS,EAAE,CAAC;IACb,CAAC;AACF,CAAC,CAAC,CAAC","sourcesContent":["/// <reference lib=\"webworker\" />\n\nconst API_URL = process.env.NEXT_PUBLIC_LOGGER_URL || \"https://log.bones.sh/v1\";\n\n/**\n * Logger Worker\n * This worker handles logging operations in batches to reduce API calls.\n */\n\nconst logQueue: any[] = [];\nconst MAX_BATCH_SIZE = 10;\nconst FLUSH_INTERVAL = 5000; // 5 seconds\n\nconst flushLogs = (): void => {\n\tif (logQueue.length === 0) {\n\t\treturn;\n\t}\n\n\tconst logsToSend = logQueue.splice(0, MAX_BATCH_SIZE);\n\tfetch(API_URL, {\n\t\tmethod: \"POST\",\n\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\tbody: JSON.stringify(logsToSend),\n\t})\n\t\t.then(async (response) => {\n\t\t\tconsole.log(\"Logs sent:\", response.statusText, response);\n\t\t})\n\t\t.catch((error: Error) => console.error(\"Error sending logs:\", error));\n\tconsole.log(\"Flushed logs:\", logsToSend);\n};\n\nsetInterval(flushLogs, FLUSH_INTERVAL);\n\nself.addEventListener(\"message\", (event: MessageEvent) => {\n\tconst { logData } = event.data;\n\tlogQueue.push(logData);\n\tflushLogs();\n\n\tif (logQueue.length >= MAX_BATCH_SIZE) {\n\t\tflushLogs();\n\t}\n});\n"]}